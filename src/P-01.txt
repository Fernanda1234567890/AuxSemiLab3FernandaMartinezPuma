---------------.gitignore------------------
es un archivo de texto que le dice a Git qué archivos o carpetas ignorar en un proyecto.Un archivo local
 .gitignore generalmente se coloca en el directorio raíz de un proyecto. También puedes crear un archivo 
 global .gitignore, y cualquier entrada en ese archivo se ignorará en todos tus repositorios de Git.
___creación
Para crear un archivo .gitignore local, crea un archivo de texto y asígnale el nombre ".gitignore" 
(recuerdar incluir el . al principio). Luego, edita este archivo según sea necesario. Cada nueva línea 
debe incluir un archivo o carpeta adicional que quieras que Git lo ignore.
Las entradas de este archivo también pueden seguir un patrón coincidente:

* se utiliza como una coincidencia comodín.
/ se usa para ignorar las rutas relativas al archivo .gitignore.
# es usado para agregar comentarios
Este es un ejemplo de cómo puede lucir el archivo .gitignore :

    # Ignora la carpeta node_modules
    node_modules
    # Ignora todos los archivos de texto
    *.txt
    # Ignora los archivos relacionados a API keys
    .envs
    # Ignora archivos de configuración SASS
    .sass-cache
Para agregar o cambiar tu .gitignore global, ejecuta el siguiente comando en la terminal:

    git config --global core.excludesfile ~/.gitignore_global

Esto creará el archivo ~/.gitignore_global. Ahora puedes editar ese archivo de la misma manera que 
un archivo .gitignore local. Todos tus repositorios Git ignorarán los archivos y carpetas listadas 
en el .gitignore global.

Para evitar el rastreo de un solo archivo, es decir, detener el rastreo del archivo, pero no borrarlo 
del sistema, utiliza:
        git rm --cached nombre-del-archivo

Para evitar el rastreo de todos los archivos en .gitignore:
Primero haces "commit" de cualquier cambio de código pendiente, y luego ejecuta:
        git rm -r --cached

Esto elimina los archivos modificados del índice (área de montaje), y luego ejecuta:
        git add .

Haces "commit":
        git commit -m ".gitignore funciona correctamente"

Para deshacer git rm --cached nombre-del-archivo, usa :
        git add nombre-del-archivo
-----------Package.json------
Al crear un nuevo proyecto con npm init, se lanzará un asistente que tras algunas preguntas, crea un archivo 
llamado package.json en la carpeta raíz del proyecto, donde coloca toda la información que se conoce sobre el 
mismo. Este archivo es un simple fichero de texto, en formato JSON que incorpora a través de varios campos 
información muy variada.
Este fichero tiene una estructura definida muy concreta, y a través de sus campos se puede guardar y recuperar 
información muy útil.
_____Campos del package.json
Si creamos un nuevo proyecto con los valores por defecto (omitiendo el asistente) con el comando npm init -y, 
se generará el siguiente archivo package.json, el cuál podemos abrir con nuestro editor de texto preferido 
para modificarlo:

        - name
        Nombre del proyecto, librería o paquete. Se recomienda que coincida con el repositorio.
        - version
        Versión del paquete. Generalmente se utiliza semver (lo veremos más adelante).
        - description
        Descripción breve del paquete o proyecto.
        - type
        Tipo de sistema de módulos a utilizar. Con module usa ESM, en caso contrario usa CommonJS.
        - main
        Punto de entrada del proyecto. Suele ser index.js (node) o index.html (browser).
        - module
        Idem al anterior, pero respecto a ES Modules en lugar de CommonJS.
        - scripts
        Colección de scripts del proyecto (lo veremos más adelante).
        - keywords
        de  con palabras clave relacionadas con el proyecto. Util en búsquedas.
        - author
        Nombre del autor del paquete o un  con name, email y/o url.
        - license
        Tipo de licencia del paquete o proyecto. Por defecto, ISC.
        - dependencies
        Colección de paquetes para producción y la versión instalada.
        - devDependencies
        Colección de paquetes para desarrollo y la versión instalada.
        - homepage
        URL de la página principal del paquete.
        - repository
        URL del repositorio. Se debe indicar type (git, svn...) y url (ruta).
        - bugs
        Objeto con campo url con la URL de la página de issues del proyecto.
Si nuestro paquete (o alguna dependencia) tiene definidos estos últimos 3 campos en su package.json podemos 
utilizar los siguientes comandos, incluso si no tenemos instalada la dependencia en nuestro proyecto:
            # Accede a la homepage de documentación del paquete "howler"
            $ npm docs howler
            $ npm home howler

            # Accede al repositorio del paquete "howler"
            $ npm repo howler

            # Accede a la página de issues del paquete "howler"
            $ npm issues howler
            $ npm bugs howler

Lo realmente interesante de estos campos es que funcionan a modo de índice o guía de paquetes necesarios para 
el proyecto, de modo que sólo con el fichero package.json en una carpeta vacía, podemos indicarle a npm que 
descargue todas las dependencias necesarias para el proyecto en la carpeta node_modules/ escribiendo lo siguiente:
            # Pedimos a NPM que descargue las dependencias necesarias en node_modules/
            $ npm install

Una vez instalados los paquetes, tendremos nuestro proyecto listo para realizar bare imports, es decir, importaciones 
sin ruta (solo con el nombre del paquete), que node buscará en la carpeta node_modules/:

            // Importamos la librería Howler de la carpeta node_modules/
            import { Howler, Howl } from "howler";

            const audio = new Howl({
            src: ["/assets/audio.mp3"]
            });


